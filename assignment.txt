Que1----- Explain the key features of Python that make it a popular choice for programming ?

Ans- #1- Readability and Simplicity: Python's syntax is clean and easy to understand, making it an excellent choice for beginners and for maintaining complex projects.
     #2- Versatility: Python is a general-purpose language that supports various programming paradigms, including procedural, object-oriented, and functional programming. 
     #3- Extensive Standard Library: Python comes with a comprehensive standard library that provides modules and functions for common programming tasks, reducing the need to write code from scratch.
     #4- Large Ecosystem and Community: Python has a vast ecosystem of third-party libraries and frameworks, such as NumPy, Pandas, Django, Flask, and TensorFlow. 
     #5- Automation and Scripting: Python is widely used for automation and scripting tasks, simplifying repetitive tasks and improving productivity.

Que2------  Describe the role of predefined keywords in Python and provide examples of how they are used in a program ?
Ans- Predefined keywords in Python are reserved words that have special meanings and purposes in the language's syntax. They are essential building blocks for writing Python programs, as they define the language's structure and control flow. Here are some key roles and examples of predefined keywords in Python
     
     #1 print
     print("Hello, World!")
     # Output: Hello, World!

     #2 str
      num = 123
      num_str = str(num)
      print(num_str)
      # Output: '123'

    #3 int
    num_str = "123"
   num = int(num_str)
   print(num)
   # Output: 123

   #4 float
   num_str = "123.45"
  num = float(num_str)
  print(num)
  # Output: 123.45

  #5 type
  num = 123
  print(type(num))
  # Output: <class 'int'>

Que3-------- Compare and contrast mutable and immutable objects in Python with examples ?
Ans- In Python, the distinction between mutable and immutable objects is crucial for understanding how data is managed and manipulated in the language. Hereâ€™s a comparison:

   #Mutable Objects
   Definition:

  Mutable objects are those whose value or state can be changed after they are created.
  Examples:

  Lists
  Dictionaries
  Sets
  # List (mutable)
  my_list = [1, 2, 3]
  print(my_list)  # Output: [1, 2, 3]

  my_list.append(4)
  print(my_list)  # Output: [1, 2, 3, 4]

  # Dictionary (mutable)
  my_dict = {'a': 1, 'b': 2}
  print(my_dict)  # Output: {'a': 1, 'b': 2}

  my_dict['c'] = 3
  print(my_dict)  # Output: {'a': 1, 'b': 2, 'c': 3}
 

 Immutable Objects
 Definition:

Immutable objects are those whose value or state cannot be changed after they are created.
Examples:

  Tuples
  Strings
  Integers
  Floats

  # String (immutable)
  my_string = "hello"
  print(my_string)  # Output: hello

  new_string = my_string.replace("h", "j")
  print(my_string)  # Output: hello
  print(new_string)  # Output: jello

  # Tuple (immutable)
  my_tuple = (1, 2, 3)
  print(my_tuple)  # Output: (1, 2, 3)

  new_tuple = my_tuple + (4,)
  print(my_tuple)  # Output: (1, 2, 3)
  print(new_tuple)  # Output: (1, 2, 3, 4)

   Use Cases
   Mutable:

   Use mutable objects when you need to frequently change or update the data.
   Example: Managing a collection of items, such as a list of users in a session.
   Immutable:

   Use immutable objects when you need data that should not change, ensuring data integrity.
   Example: Using keys in dictionaries, where keys must be immutable to maintain hash consistency.



Que4---------  Discuss the different types of operators in Python and provide examples of how they are used ?
Ans- In Python, operators are special symbols or keywords used to perform operations on operands. Python supports various types of operators, each serving different purposes. Here are the main types of operators in Python:

  1. Arithmetic Operators
  Used to perform basic arithmetic operations.

  Addition (+)
  result = 5 + 3 

   # result is 8

  Subtraction (-)
  result = 5 - 3  
  
  # result is 2
  
  Multiplication (*)
  result = 5 * 3

  # result is 15

  Division (/)
  result = 5 // 3  
  
  # result is 1

  Modulus (%)
  result = 5 % 3 
  
   # result is 2

   Floor Division (//)
   result = 5 // 3  
   
   # result is 1

  2. Comparison Operators
 Used to compare two values and return a boolean result.

 Equal (==)
result = 5 == 3  # result is False

Not Equal (!=)
result = 5 != 3  # result is True

Greater Than (>)
result = 5 > 3  # result is True

Less Than (<)
result = 5 < 3  # result is False

Greater Than or Equal To (>=)
result = 5 >= 3  # result is True

Less Than or Equal To (<=)
result = 5 <= 3  # result is False

3. Logical Operators
Used to combine conditional statements.

AND (&)
result = 5 & 3  # result is 1 (binary: 0101 & 0011 = 0001)

OR (|)
result = 5 | 3  # result is 7 (binary: 0101 | 0011 = 0111)

XOR (^)
result = 5 ^ 3  # result is 6 (binary: 0101 ^ 0011 = 0110)

NOT (~)
result = ~5  # result is -6 (binary: ~0101 = 1010 which is -6 in two's complement)

Left Shift (<<)
result = 5 << 1  # result is 10 (binary: 0101 << 1 = 1010)

Right Shift (>>)
result = 5 >> 1  # result is 2 (binary: 0101 >> 1 = 0010)

 5. Assignment Operators
 Used to assign values to variables.

 Assign (=)
a = 5

Add and Assign (+=)
a += 3  # equivalent to a = a + 3

Subtract and Assign (-=)
a -= 3  # equivalent to a = a - 3

Multiply and Assign (*=)
a *= 3  # equivalent to a = a * 3

Divide and Assign (/=)
a /= 3  # equivalent to a = a / 3

Floor Divide and Assign (//=)
a //= 3  # equivalent to a = a // 3
Modulus and Assign (%=)
a %= 3  # equivalent to a = a % 3

Exponentiate and Assign (**=)
a **= 3  # equivalent to a = a ** 3
Bitwise AND and Assign (&=)
a &= 3  # equivalent to a = a & 3

Bitwise OR and Assign (|=)
a |= 3  # equivalent to a = a | 3

Bitwise XOR and Assign (^=)
a ^= 3  # equivalent to a = a ^ 3

Bitwise Left Shift and Assign (<<=)
a <<= 3  # equivalent to a = a << 3

Bitwise Right Shift and Assign (>>=)
a >>= 3  # equivalent to


Que--------5 Explain the concept of type casting in Python with examples?
Ans- Type casting in Python refers to converting an object from one data type to another.
    int(): Converts a value to an integer.
    float(): Converts a value to a float.
   str(): Converts a value to a string.

   # Converting a float to an integer
  num_float = 3.14
  num_int = int(num_float)
  print(num_int)  # Output: 3

  # Converting a string to an integer
  num_str = "123"
  num_int = int(num_str)
  print(num_int)  # Output: 123

  # Converting an integer to a float
  num_int = 10
  num_float = float(num_int)
  print(num_float)  # Output: 10.0

  # Converting a string to a float
  num_str = "123.45"
  num_float = float(num_str)
  print(num_float)  # Output: 123.45

  # Converting an integer to a string
  num_int = 100
  num_str = str(num_int)
  print(num_str)  # Output: "100"

  # Converting a float to a string
  num_float = 3.14159
  num_str = str(num_float)
  print(num_str)  # Output: "3.14159"

Que6---------------  How do conditional statements work in Python? Illustrate with examples ?
Ans- Conditional statements in Python allow you to execute specific blocks of code based on certain conditions.

   Types of Conditional Statements -
   if statement
   if-else statement
   Nested conditional statements
    
    #1 if condition:
    # Block of code

    if condition:
    age = 20
    if age >= 18:
    print("You are an adult.")
    # Output: You are an adult.

    #2 if condition:
    # Block of code if condition is true
 else:
    # Block of code if condition is false

    age = 16
  if age >= 18:
    print("You are an adult.")
  else:
    print("You are a minor.")
  # Output: You are a minor.

 #3 if condition1:
    if condition2:
        # Block of code if condition1 and condition2 are true
    else:
        # Block of code if condition1 is true but condition2 is false
else:
    # Block of code if condition1 is false

    num = 10
  if num > 0:
    if num % 2 == 0:
        print("Positive and even number")
    else:
        print("Positive but odd number")
  else:
    print("Negative number")
  # Output: Positive and even number



Que7------------ Describe the different types of loops in Python and their use cases with examples ?
Ans- In Python, there are two primary types of loops used for iterating over sequences and performing repetitive tasks: for loops, while loops. 

#1 for item in sequence:
    # Block of code

    fruits = ["apple", "banana", "cherry"]
    for fruit in fruits:
    print(fruit)
    # Output:
    # apple
    # banana
    # cherry

#2  while Loop
  # Repeating actions until a certain condition is met.
    while condition:
    # Block of code

    password = ""
    while password != "secret":
    password = input("Enter the password: ")
    print("Access granted")
    # The loop continues until the user inputs "secret"